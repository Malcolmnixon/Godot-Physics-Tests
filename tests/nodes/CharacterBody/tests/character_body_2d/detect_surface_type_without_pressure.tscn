[gd_scene load_steps=2 format=3 uid="uid://dnhgqjtnu71n"]

[sub_resource type="GDScript" id="GDScript_agr36"]
script/source = "extends PhysicsUnitTest2D

@export var body_mode := CharacterBody2D.MOTION_MODE_GROUNDED

func test_description() -> String:
	return \"\"\"Checks that the surface is detected (wall, ground, ceiling), without constant preessure,
	only one surface at a time should be detected, and only when the body touches them, not during the movement.
	Param [body_mode]: in Floating mode only wall should be detected.
	\"\"\"
	
func test_name() -> String:
	var mode = \"Grounded\" if body_mode == CharacterBody2D.MOTION_MODE_GROUNDED else \"Floating\"
	return \"CharacterBody2D | checks surface detection when the body don't push against the wall [mode=S]\" % [mode]

func start() -> void:
	add_collision_boundaries(150)
	
	# checks all collision type
	var test_lambda
	if body_mode == CharacterBody2D.MOTION_MODE_GROUNDED:
		test_lambda = func(step, target, monitor):
			if step == 0: return target.get_slide_collision_count() == 0 # idle
			elif step == 1: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # touch right wall
			elif step == 2: return target.get_slide_collision_count() == 0 # go up
			elif step == 3: return target.is_on_ceiling_only() and target.get_slide_collision_count() == 1 # hit the ceiling
			elif step == 4: return target.get_slide_collision_count() == 0 # move left
			elif step == 5: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # hit the left wall
			elif step == 6: return target.get_slide_collision_count() == 0 # move down
			elif step == 7: return target.is_on_floor_only() and target.get_slide_collision_count() == 1 # hit the floor
			elif step == 8: return target.get_slide_collision_count() == 0 # move right
	elif body_mode == CharacterBody2D.MOTION_MODE_FLOATING:
		test_lambda = func(step, target, monitor):
			if step == 0: return target.get_slide_collision_count() == 0 # idle
			elif step == 1: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # touch right wall
			elif step == 2: return target.get_slide_collision_count() == 0 # go up
			elif step == 3: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # hit the ceiling
			elif step == 4: return target.get_slide_collision_count() == 0 # move left
			elif step == 5: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # hit the left wall
			elif step == 6: return target.get_slide_collision_count() == 0 # move down
			elif step == 7: return target.is_on_wall_only() and target.get_slide_collision_count() == 1 # hit the floor
			elif step == 8: return target.get_slide_collision_count() == 0 # move right
	
	var cbk_lambda = func(step: int, target: CharacterBody2D, is_transition: bool, p_monitor: Monitor):
		if not is_transition: 
			return
		if step == 0: target.velocity = Vector2(500, 0) # right
		elif step == 1: target.velocity = Vector2(0, -500) # up 
		elif step == 3: target.velocity = Vector2(-500, 0) # left
		elif step == 5: target.velocity = Vector2(0, 500) # down
		elif step == 7: target.velocity = Vector2(500, 0) # right

	var cpt_layer := 1
	for shape_type in PhysicsTest2D.TestCollisionShape.values():
		# Create character
		var character = CharacterBody2D.new()
		character.script = load(\"res://tests/nodes/CharacterBody/scripts/2d/character_body_2d_move_and_slide.gd\")
		character.motion_mode = body_mode
		character.position = CENTER
		character.collision_layer = 0
		character.collision_mask = 0
		character.set_collision_layer_value(cpt_layer, true)
		character.set_collision_mask_value(cpt_layer, true)
		
		var body_col: Node2D = get_default_collision_shape(shape_type, 2)
		character.add_child(body_col)
		character.velocity = Vector2(500,0)
		
		add_child(character)

		var contact_monitor := create_generic_monitor(character, test_lambda, cbk_lambda)
		contact_monitor.test_name = \"%s detects collisions correctly\" % [shape_name(shape_type)]
		
		cpt_layer += 1
"

[node name="detect_wall_type_without_pressure" type="Node2D"]
script = SubResource("GDScript_agr36")
