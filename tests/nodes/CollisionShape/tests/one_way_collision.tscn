[gd_scene load_steps=2 format=3 uid="uid://cn8t6ijidyv2k"]

[sub_resource type="GDScript" id="GDScript_f4lrm"]
script/source = "extends PhysicsUnitTest2D

var speed := 400
var simulation_duration := 1

func test_description() -> String:
	return \"\"\"Checks if [One Way Collision] works properly, it must only collide on the edge
	that face up (relative to CollisionPolygon2D's rotation).
	\"\"\"
	
func test_name() -> String:
	return \"CollisionShape2D | testing [One Way Collision]\"

func start() -> void:
	var wall_on_way = get_static_body_with_collision_shape(Rect2(Vector2(0,0), Vector2(Global.WINDOW_SIZE.x/2,20)), TestCollisionShape.RECTANGLE, true)
	wall_on_way.position = CENTER_LEFT
	var collision_shape: CollisionShape2D = wall_on_way.get_child(0)
	collision_shape.one_way_collision = true
	add_child(wall_on_way)
	
	var r1_should_pass = create_rigid_body(-speed) # Go UP
	r1_should_pass.position = Vector2(Global.WINDOW_SIZE.x /4 - 100, Global.WINDOW_SIZE.y - 200)
	
	var r1_test_lambda: Callable = func(p_step, p_target: RigidDynamicBody2D, p_monitor):
		return p_target.position.y < (CENTER.y - 20)
		
	var r1_pass_monitor = create_generic_expiration_monitor(r1_should_pass, r1_test_lambda, simulation_duration)
	r1_pass_monitor.test_name = \"Body facing moving in up direction should pass the wall\"
	
	var r2_should_not_pass = create_rigid_body(speed) # Go DOWN
	r2_should_not_pass.position = Vector2(Global.WINDOW_SIZE.x /4 + 100, 200)
	
	var r2_test_lambda: Callable = func(p_step, p_target: RigidDynamicBody2D, p_monitor):
		return p_target.position.y >= (CENTER.y - 20) and p_target.position.y <= CENTER.y + 20 
	
	var r2_not_pass_monitor = create_generic_expiration_monitor(r2_should_not_pass, r2_test_lambda, simulation_duration)
	r2_not_pass_monitor.test_name = \"Body not facing up direction should not pass the wall\"

func create_rigid_body(p_speed, p_shape: PhysicsTest2D.TestCollisionShape = TestCollisionShape.CIRCLE) -> RigidDynamicBody2D:
	
	var player = RigidDynamicBody2D.new()
	player.add_child(get_default_collision_shape(p_shape))
	player.gravity_scale = 0
	player.apply_central_impulse(Vector2(0, p_speed))
	add_child(player)
	return player
"

[node name="one_way_collision" type="Node2D"]
script = SubResource("GDScript_f4lrm")
